package elxfiro

import (
	"bytes"
	"fmt"
	"testing"

	"github.com/dev-warrior777/go-electrum-client/electrumx"
)

var hdr0 = []byte{
	0x00, 0x10, 0x00, 0x20, 0x6e, 0xd5, 0x90, 0x6c, 0xb5, 0x3d, 0xc3, 0x0e, 0x01, 0xd0, 0x74, 0xd4,
	0x94, 0x18, 0x0a, 0x41, 0x49, 0xe6, 0x87, 0x98, 0xfc, 0xf0, 0x9e, 0x1a, 0x40, 0x7a, 0x28, 0x96,
	0x60, 0x4c, 0x4d, 0x2a, 0x92, 0xd0, 0xbf, 0x03, 0xa5, 0xa9, 0x30, 0x34, 0x96, 0xb0, 0x2f, 0x89,
	0xb4, 0xb5, 0x41, 0x0f, 0xbb, 0xa1, 0xad, 0x23, 0x35, 0x91, 0x22, 0xd5, 0xd8, 0xed, 0x32, 0x4f,
	0x3d, 0xce, 0x99, 0xc0, 0x2c, 0x77, 0x2c, 0x67, 0x15, 0xeb, 0x5b, 0x1b, 0x2c, 0x14, 0x0f, 0x00,
	0x46, 0x6d, 0xe9, 0x33, 0x00, 0x00, 0xfd, 0x2b, 0x3a, 0x9e, 0xc2, 0x9f, 0xcc, 0x1e, 0x65, 0x7e,
	0xdb, 0x79, 0xba, 0x1b, 0x2e, 0xfc, 0xe9, 0xa0, 0x6f, 0x18, 0x5d, 0xa4, 0xe0, 0xe5, 0x7e, 0x43,
	0x72, 0xbf, 0xa6, 0x8b, 0xbc, 0x99, 0xb5, 0x1b}

var hdr1 = []byte{
	0x00, 0x10, 0x00, 0x20, 0xe6, 0x10, 0x0f, 0xc3, 0xde, 0xf7, 0xaf, 0x32, 0xec, 0x0b, 0x23, 0x98,
	0x20, 0x00, 0x43, 0xaf, 0x89, 0xa2, 0xc6, 0x76, 0x06, 0x29, 0xf7, 0xe7, 0x2c, 0x2a, 0xbb, 0x53,
	0xe3, 0x8a, 0x56, 0x0c, 0x9d, 0xf3, 0x78, 0x2e, 0xec, 0x74, 0x32, 0x72, 0xca, 0x9c, 0x6b, 0x8c,
	0x92, 0xd5, 0x8c, 0xe7, 0x55, 0xa8, 0x30, 0xd3, 0xb0, 0x03, 0xe9, 0x57, 0x9c, 0x1f, 0x26, 0xec,
	0x68, 0xea, 0xeb, 0xea, 0x3c, 0x77, 0x2c, 0x67, 0x15, 0xeb, 0x5b, 0x1b, 0x2d, 0x14, 0x0f, 0x00,
	0x3e, 0x82, 0x6f, 0xb4, 0x96, 0xe4, 0x5f, 0x5f, 0x6e, 0xb8, 0xce, 0xfa, 0xbe, 0x15, 0xea, 0x41,
	0xca, 0xb0, 0x6e, 0x08, 0xbe, 0x5b, 0xd4, 0x43, 0x4c, 0xa6, 0xf6, 0x91, 0xf4, 0x38, 0x1f, 0x6c,
	0x1b, 0x1e, 0x61, 0xe3, 0xd5, 0xb2, 0x83, 0x5b}

func mkProgPowCfg() *electrumx.ElectrumXConfig {
	return &electrumx.ElectrumXConfig{
		Coin:    "firo",
		NetType: "mainnet",
		DataDir: "/tmp",
	}
}

func TestHeaderProgPowDeserializer(t *testing.T) {
	cfg := mkProgPowCfg()

	iface, _ := NewElectrumXInterface(cfg)
	d := iface.config.HeaderDeserializer

	rdr0 := bytes.NewBuffer(hdr0)
	blkHdr0, err := d.Deserialize(rdr0)
	if err != nil {
		t.Fatal(err)
	}
	fmt.Printf("Version: %x\n", blkHdr0.Version)
	fmt.Printf("Hash:    %x\n", blkHdr0.Hash)
	fmt.Printf("Prev:    %x\n", blkHdr0.Prev)
	fmt.Printf("Merkle:  %x\n", blkHdr0.Merkle)

	rdr1 := bytes.NewBuffer(hdr1)
	blkHdr1, err := d.Deserialize(rdr1)
	if err != nil {
		t.Fatal(err)
	}
	fmt.Printf("Version: %x\n", blkHdr1.Version)
	fmt.Printf("Hash:    %x\n", blkHdr1.Hash)
	fmt.Printf("Prev:    %x\n", blkHdr1.Prev)
	fmt.Printf("Merkle:  %x\n", blkHdr1.Merkle)

	if !bytes.Equal(blkHdr0.Hash[:], blkHdr1.Prev[:]) {
		t.Fatalf("hash1: %x .. expected same for prev2 - got %x", blkHdr0.Hash, blkHdr1.Prev)
	}
}
