
mainnet:
electrumx.firo.org:50002
electrumx01.firo.org:50002
electrumx02.firo.org:50002
electrumx03.firo.org:50002

987_000


testnet:
95.179.164.13:51002

170_000

regtest:
127.0.0.1:50002
===============

class Firo(Coin):
    NAME = "Firo"
    SHORTNAME = "FIRO"
    NET = "mainnet"
    P2PKH_VERBYTE = bytes.fromhex("52")
    P2EPKH_VERBYTE = bytes.fromhex("b9")
    P2SH_VERBYTES = (bytes.fromhex("07"),)
    WIF_BYTE = bytes.fromhex("d2")
    GENESIS_HASH = ('4381deb85b1b2c9843c222944b616d99'
                    '7516dcbd6a964e1eaf0def0830695233')
    TX_COUNT = 667154
    TX_COUNT_HEIGHT = 100266
    TX_PER_BLOCK = 4000  # 2000 for 1MB block
    IRC_PREFIX = None
    RPC_PORT = 8888
    REORG_LIMIT = 5000
    PEER_DEFAULT_PORTS = {'t': '50001', 's': '50002'}
    MTP_HEADER_EXTRA_SIZE = 100
    MTP_HEADER_DATA_SIZE = 198864
    MTP_HEADER_DATA_START = Coin.BASIC_HEADER_SIZE + MTP_HEADER_EXTRA_SIZE
    MTP_HEADER_DATA_END = MTP_HEADER_DATA_START + MTP_HEADER_DATA_SIZE
    MTP_STRIPPED_HEADER_DATA_END = MTP_HEADER_DATA_START + 16
    PROGPOW_HEADER_EXTRA_SIZE = 40
    STATIC_BLOCK_HEADERS = False
    SESSIONCLS = FiroElectrumX
    DAEMON = daemon.FiroMtpDaemon
    DESERIALIZER = lib_tx_dash.DeserializerFiro
    PEERS = [
        'electrum.polispay.com'
    ]
    PROGPOW_START_TIME = 1635228000

    @classmethod
    def is_mtp(cls, header):
        if isinstance(header, str):
            nVersion, = unpack_le_uint32_from(hex_to_bytes(header[0:4*2]))
        elif isinstance(header, bytes):
            nVersion, = unpack_le_uint32_from(header[0:4])
        else:
            raise "Cannot handle the passed type"
        return nVersion & 0x1000

    @classmethod
    def is_progpow(cls, header):
        if isinstance(header, str):
            nTime, = unpack_le_uint32_from(hex_to_bytes(header[68*2:72*2]))
        elif isinstance(header, bytes):
            nTime, = unpack_le_uint32_from(header[68:72])
        else:
            raise "Cannot handle the passed type"

        return nTime >= cls.PROGPOW_START_TIME

    @classmethod
    def block_header(cls, block, height):
        sz = cls.BASIC_HEADER_SIZE
        if cls.is_progpow(block):
            sz += cls.PROGPOW_HEADER_EXTRA_SIZE
        elif cls.is_mtp(block):
            sz += cls.MTP_HEADER_EXTRA_SIZE
        return block[:sz]

    @classmethod
    def header_hash(cls, header):
        sz = cls.BASIC_HEADER_SIZE
        if cls.is_progpow(header):
            sz += cls.PROGPOW_HEADER_EXTRA_SIZE
        elif cls.is_mtp(header):
            sz += cls.MTP_HEADER_EXTRA_SIZE
        return double_sha256(header[:sz])


class FiroTestnet(Firo):
    SHORTNAME = "tFIRO"
    NET = "testnet"
    XPUB_VERBYTES = bytes.fromhex("043587cf")
    XPRV_VERBYTES = bytes.fromhex("04358394")
    P2PKH_VERBYTE = bytes.fromhex("41")
    P2EPKH_VERBYTE = bytes.fromhex("b9")
    P2SH_VERBYTES = (bytes.fromhex("b2"),)
    WIF_BYTE = bytes.fromhex("b9")
    GENESIS_HASH = 'aa22adcc12becaf436027ffe62a8fb21' \
                   'b234c58c23865291e5dc52cf53f64fca'
    REORG_LIMIT = 8000
    RPC_PORT = 18888
    PROGPOW_START_TIME = 1630069200


class FiroRegtest(Firo):
    SHORTNAME = "tFIRO"
    NET = "regtest"
    XPUB_VERBYTES = bytes.fromhex("043587cf")
    XPRV_VERBYTES = bytes.fromhex("04358394")
    P2PKH_VERBYTE = bytes.fromhex("41")
    P2EPKH_VERBYTE = bytes.fromhex("b9")
    P2SH_VERBYTES = (bytes.fromhex("b2"),)
    WIF_BYTE = bytes.fromhex("ef")
    GENESIS_HASH = 'a42b98f04cc2916e8adfb5d9db8a2227'\
                   'c4629bc205748ed2f33180b636ee885b'
    REORG_LIMIT = 8000
    RPC_PORT = 18444
    # INT_MAX from chainparams 2147483647 0x7fffffff
    PROGPOW_START_TIME = 2147483647


